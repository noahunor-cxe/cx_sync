pipeline:
  name: demo
  identifier: demo
  projectIdentifier: bootcampcinoahunor
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.githubconnector
        repoName: cx_sync
        build: <+input>
  stages:
    - stage:
        name: demo
        identifier: demo
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: false
            paths: []
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.testk8s
              namespace: default
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    connectorRef: account.AWS_Connector
                    image: 915632791698.dkr.ecr.us-east-1.amazonaws.com/my-first-ecr-repo
                    shell: Bash
                    command: |-
                      echo "Hello World"
                      aws s3 ls
              - step:
                  type: Run
                  name: Run_2
                  identifier: Run_2
                  spec:
                    connectorRef: account.AWS_Connector
                    image: 915632791698.dkr.ecr.us-east-1.amazonaws.com/my-first-ecr-repo
                    shell: Sh
                    command: echo "Hello World"
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: MarkAsFailure
    - stage:
        name: final
        identifier: final
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          services:
            values:
              - serviceRef: nginx
              - serviceRef: init_instance
              - serviceRef: testschwab
            metadata:
              parallel: false
          environments:
            metadata:
              parallel: false
            values:
              - environmentRef: test
                deployToAll: true
                infrastructureDefinitions: <+input>
              - environmentRef: testdgenv
                deployToAll: true
                infrastructureDefinitions: <+input>
              - environmentRef: testforever
                deployToAll: true
                infrastructureDefinitions: <+input>
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: echo "Hello World"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
            rollbackSteps: []
        tags: {}
        when:
          pipelineStatus: Success
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: MarkAsFailure
