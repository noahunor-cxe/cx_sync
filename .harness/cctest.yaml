pipeline:
  name: cc-test
  identifier: cctest
  projectIdentifier: bootcampcinoahunor
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: testconn
        repoName: cx_sync
        build: <+input>
        sparseCheckout: []
  stages:
    - stage:
        name: cc-runstep
        identifier: ccrunstep
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    connectorRef: account.harnessImage
                    image: library/nginx
                    shell: Bash
                    command: |-
                      echo "Hello"
                      #!/bin/bash

                      echo "Client-Server Build Pipeline Initialized"
                      echo "Repository: <+codebase.repoUrl>"
                      echo "PR Number: <+codebase.prNumber>"
                      echo "PR Title: <+codebase.prTitle>"
                      echo "PR Link: <+codebase.pullRequestLink>"
                      echo "Target Branch: <+codebase.targetBranch>"
                      echo "Source Branch: <+codebase.sourceBranch>"
                      echo "Commit SHA: <+codebase.commitSha>"
                      echo "Commit User: <+codebase.gitUserId>"
                      echo "User Email: <+codebase.gitUserEmail>"
                      echo "Code State: <+codebase.state>"

                      echo "****************************************"

                      # Print current directory and contents
                      pwd
                      ls -lah

                      echo "****************************************"
                      echo "Checking installed tools..."
                      echo "****************************************"

                      # Check Java (OpenJDK 8)
                      echo "Java version:"
                      java -version || echo "Java is not installed or not in PATH."

                      echo "****************************************"

                      # Check Git
                      echo "Git version:"
                      git --version || echo "Git is not installed or not in PATH."

                      echo "****************************************"

                      # Check jq
                      echo "jq version:"
                      jq --version || echo "jq is not installed or not in PATH."

                      echo "****************************************"

                      # Check Apache Ant
                      echo "Apache Ant version:"
                      ant -version || echo "Apache Ant is not installed or not in PATH."

                      echo "****************************************"

                      # Check Azure CLI
                      if command -v az &> /dev/null; then
                          echo "Azure CLI is installed."
                      else
                          echo "Azure CLI is not installed or not in PATH."
                      fi

                      echo "****************************************"

                      # Check Google Cloud SDK
                      if command -v gcloud &> /dev/null; then
                          echo "Google Cloud SDK is installed."
                      else
                          echo "Google Cloud SDK is not installed or not in PATH."
                      fi

                      echo "****************************************"

                      # Check Snyk CLI
                      if command -v snyk &> /dev/null; then
                          echo "Snyk CLI is installed."
                      else
                          echo "Snyk CLI is not installed or not in PATH."
                      fi

                      echo "****************************************"

                      # Check kubectl
                      if command -v kubectl &> /dev/null; then
                          echo "kubectl is installed."
                      else
                          echo "kubectl is not installed or not in PATH."
                      fi

                      echo "****************************************"

                      # Check Docker
                      if command -v docker &> /dev/null; then
                          echo "Docker is installed."
                      else
                          echo "Docker is not installed or not in PATH."
                      fi

                      echo "****************************************"

                      # Check Nexus IQ CLI
                      if [ -f "/usr/local/bin/nexus-iq-cli.jar" ]; then
                          echo "Nexus IQ CLI is installed."
                      else
                          echo "Nexus IQ CLI is not installed in /usr/local/bin/nexus-iq-cli.jar."
                      fi

                      echo "****************************************"
                      echo "Verification completed."

                      WORKDIR="$(pwd)"
                      echo "the working directory is: ${WORKDIR}"

                      TMS_WORKDIR="${WORKDIR}/TMS_Venta_Login"
                      Dependencies_dir="${TMS_WORKDIR}/lib"
              - step:
                  type: BuildAndPushDockerRegistry
                  name: BuildAndPushDockerRegistry_1
                  identifier: BuildAndPushDockerRegistry_1
                  spec:
                    connectorRef: account.harnessImage
                    repo: noah1854/test
                    tags:
                      - <+execution.steps.Versioning.output.outputVariables.tag>
                    caching: true
                    envVariables:
                      PLUGIN_DRY_RUN: "true"
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.testk8s
              namespace: noahns
              serviceAccountName: test
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: MarkAsFailure
    - stage:
        name: test
        identifier: test
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: nginx
          environment:
            environmentRef: <+input>
            deployToAll: false
            environmentInputs: <+input>
            serviceOverrideInputs: <+input>
            infrastructureDefinitions: <+input>
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "Hello World"
                          #!/bin/bash

                          # Set KUBECONFIG to Harness kubeconfig path
                          export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}

                          # Try to get the ConfigMap
                          echo "Checking for existing ConfigMap krb5-config in namespace default..."

                          kubectl get configmap krb5-config -n default

                          if [ $? -eq 0 ]; then
                            echo "ConfigMap exists!"
                            echo "export CONFIGMAP_EXISTS=true" >> harnessenv
                          else
                            echo "ConfigMap does not exist."
                            echo "export CONFIGMAP_EXISTS=false" >> harnessenv
                          fi
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: ShellScript_2
                  identifier: ShellScript_2
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "Was the ConfigMap found? ${CONFIGMAP_EXISTS}"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: HarnessApproval
                  name: test
                  identifier: test
                  spec:
                    approvalMessage: Please review the following information and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    isAutoRejectEnabled: false
                    approvers:
                      userGroups:
                        - account._account_all_users
                      minimumCount: 1
                      disallowPipelineExecutor: false
                    approverInputs: []
                  timeout: 1d
            rollbackSteps: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: MarkAsSuccess
  variables:
    - name: envvar
      type: String
      description: ""
      required: false
      value: <+env.name>
    - name: envvar2
      type: String
      description: ""
      required: false
      value: <+env.type>
  notificationRules:
    - name: test
      identifier: test
      pipelineEvents:
        - type: StageFailed
          forStages:
            - ccrunstep
      notificationMethod:
        type: Email
        spec:
          userGroups: []
          recipients:
            - noah.unor@harness.io
      enabled: true
  delegateSelectors:
    - noah-delegate
